name: Validate All Test Cases
on:
  workflow_dispatch:
  push:
    paths:
      - '**.xml'
      - '**/v[0-9]*/**.xml' 
      - '.github/workflows/**'
    branches:
      - main
      - validatingAllTestCases

permissions: 
  contents: write
  pages: write

jobs:
  validate-xml:
    runs-on: ubuntu-latest
    env:
      SCRIPTING_LICENSE_KEY: ${{ secrets.SCRIPTING_LICENSE_KEY }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Download and setup Oxygen XML Scripting
      run: |
        echo "Setting up Oxygen XML Scripting..."
        mkdir -p scripting/oxygen
        cd scripting
        # Download to a temporary file
        wget -q -O oxygen_temp.tar.gz https://www.oxygenxml.com/InstData/Editor/All/oxygen.tar.gz
        # Extract only the necessary files for validation
        tar -xzf oxygen_temp.tar.gz --strip-components=1 \
          oxygen/scripts \
          oxygen/lib \
          oxygen/classes
        # Remove the temporary archive
        rm oxygen_temp.tar.gz
        # Add license key
        echo "${{ secrets.SCRIPTING_LICENSE_KEY }}" > oxygen/scriptinglicensekey.txt
        echo "Oxygen XML Scripting setup complete."
      shell: bash

    - name: Create Validation Environment
      run: |
        mkdir -p validation-reports
        mkdir -p test_cases_validation
        
        # Initialize report files
        echo "Validation Report - $(date)" > validation-reports/validation_report.txt
        echo "Summary Report - $(date)" > validation-reports/summary.txt
        echo "Detailed Problems Report - $(date)" > validation-reports/detailed_problems.txt
      shell: bash

    - name: Run XML Validation
      id: validation
      continue-on-error: true
      run: |
        WORKSPACE="${GITHUB_WORKSPACE}"
        OXYGEN_SCRIPTS="${WORKSPACE}/scripting/oxygen/scripts"
        REPORT_DIR="${WORKSPACE}/validation-reports"
        
        cd test_cases_validation
        
        # Copy test case directories, excluding v0.9
        for util in AGR CEI CHG LBR NFG NGG PLI; do
          if [ -d "${WORKSPACE}/$util" ]; then
            find "${WORKSPACE}/$util" -type f -name "*.xml" -not -path "*/v0.9/*" -exec cp --parents {} . \;
          fi
        done

        # Create file list
        find . -type f -name "*.xml" > "${REPORT_DIR}/file_list.txt"
        
        # Process files in smaller batches to avoid memory issues
        cat "${REPORT_DIR}/file_list.txt" | while read -r file; do
          echo "Validating: $file"
          "${OXYGEN_SCRIPTS}/validate.sh" "$file" \
            -rf "${REPORT_DIR}/temp_report.txt" \
            -rft "txt" \
            -v
          
          # Append results to main report
          if [ -f "${REPORT_DIR}/temp_report.txt" ]; then
            cat "${REPORT_DIR}/temp_report.txt" >> "${REPORT_DIR}/validation_report.txt"
            rm "${REPORT_DIR}/temp_report.txt"
          fi
        done
        
        # Generate summary
        {
          echo "Validation Summary"
          echo "================="
          echo "Date: $(date)"
          echo
          echo "Files Processed: $(wc -l < ${REPORT_DIR}/file_list.txt)"
          echo
          echo "Problems Found:"
          grep -c "problem(s) found" "${REPORT_DIR}/validation_report.txt" || echo "0"
          echo
          echo "Files with Problems:"
          grep "problem(s) found" "${REPORT_DIR}/validation_report.txt" | sort | uniq -c
        } > "${REPORT_DIR}/summary.txt"
      shell: bash

    - name: Upload validation reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: validation-reports
        path: |
          validation-reports/validation_report.txt
          validation-reports/summary.txt
          validation-reports/file_list.txt
        retention-days: 5

    - name: Deploy validation reports to branch
      if: always()
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Create a new branch or switch to it
        if git show-ref --quiet refs/remotes/origin/test-case-validation-reports; then
          git checkout test-case-validation-reports
          git pull origin test-case-validation-reports
        else
          git checkout --orphan test-case-validation-reports
          git rm -rf .
        fi
        
        # Copy only the necessary files
        mkdir -p reports
        cp validation-reports/validation_report.txt reports/
        cp validation-reports/summary.txt reports/
        
        # Commit and push changes
        git add reports/
        git commit -m "Update validation reports [skip ci]" || echo "No changes to commit"
        git push -f origin test-case-validation-reports
      shell: bash
